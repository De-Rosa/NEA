using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Physics.Input;
using Physics.Rendering;
using Matrix = Physics.Walker.PPO.Matrix;

namespace Physics;

// Main game class, generated by MonoGame, which provides the generic update and rendering loops.
// Every function is called from this main function.
public class Game1 : Game
{
    public static int FrameRate = 60;
    private GraphicsDeviceManager _graphics;
    private readonly InputManager _input;
    private SpriteBatch _spriteBatch;
    private Renderer _renderer;
    private Environment _environment;
    
    // Main game class, instantiates the input manager and MonoGame required classes.w
    public Game1()
    {
        _graphics = new GraphicsDeviceManager(this);
        _input = new InputManager();
     
        Content.RootDirectory = "Content";
        IsMouseVisible = true;
    }

    // Loads the renderer, and creates the environment with an initial state.
    protected override void LoadContent()
    {
        _spriteBatch = new SpriteBatch(GraphicsDevice);
        _renderer = new Renderer(_spriteBatch);

        _renderer.UpdateConsole();
        
        _environment = new Environment(_spriteBatch, _renderer);
        _environment.InitialState();
    }

    // MonoGame required settings for the screen size and width.
    // IsFixedTimeStep represents a fixed frame rate: without a fixed frame rate, we will get
    // a large (and varied) amount of timesteps per episode.
    protected override void Initialize()
    {
        _graphics.IsFullScreen = false;
        _graphics.PreferredBackBufferWidth = 1000;
        _graphics.PreferredBackBufferHeight = 1000;
        IsFixedTimeStep = true;
        _graphics.ApplyChanges();

        base.Initialize();
    }

    // Main update function, inputs and the environment are updated.
    // The console is updated with information from the environment.
    protected override void Update(GameTime gameTime)
    {
        float deltaTime = (float) gameTime.ElapsedGameTime.TotalSeconds;
    
        base.Update(gameTime);
        _input.Update();

        (int episode, int timeStep, float distance, float averageReward, float bestDistance, float pastAverageReward, Matrix state) =
            _environment.GetConsoleInformation();
        _renderer.UpdateConsole(episode, timeStep, distance, averageReward, bestDistance, pastAverageReward, state);

        _environment.Update(deltaTime);
        HandleInputs();
        
    }   

    // Main drawing function, clears the screen and renders the environment.
    protected override void Draw(GameTime gameTime)
    {
        GraphicsDevice.Clear(Color.Black);
        _environment.RenderObjects();
        base.Draw(gameTime);
    }
    
    // Key mapping to functions using the InputManager class.
    // Basic controls, such as moving the camera and exiting the training.
    private void HandleInputs()
    {
        if (_input.IsKeyPressed(Keys.X))
        {
            _renderer.ExitTraining();    
        }
        if (_input.IsKeyHeld(Keys.Right))
        {
            _renderer.MoveCamera(new Vector2(-1, 0));
        }
        if (_input.IsKeyHeld(Keys.Left))
        {
            _renderer.MoveCamera(new Vector2(1, 0));
        }
        if (_input.IsKeyHeld(Keys.Up))
        {
            _renderer.MoveCamera(new Vector2(0, 1));
        }
        if (_input.IsKeyHeld(Keys.Down))
        {
            _renderer.MoveCamera(new Vector2(0, -1));
        }
    }
}